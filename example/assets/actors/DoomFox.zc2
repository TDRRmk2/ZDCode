// #DEFINE LOGDEBUG


class MSPart {
    isn't   SOLID;
    is      FORCEXYBILLBOARD;

    is  CLIENTSIDEONLY;

    set Gravity to 0;
}

class<Size> MSP_Limb extends MSPart {
    set Scale to Size;

    label Spawn {
        invisi 0;
        inject Display;
        Stop;
    };

    abstract macro Display;
}

class<LimbType> MSGore_FoxLimb {
    set Gravity                 to 0.825;
    set WallBounceFactor        to 0.8;
    set PushFactor              to 0.6;
    set Species                 to "MSGore";
    set Radius                  to 2;
    set Height                  to 3;
    set BounceType              to "Doom";
    set BounceCount             to 10;
    set BounceFactor            to 0.55;

    set BounceSound             to "zdpack/multisprite/animal/fox/gib/bounce";

    is  BOUNCEONWALLS;
    is  BOUNCEONCEILINGS;
    is  BOUNCEONACTORS;
    is  ALLOWBOUNCEONACTORS;

    is  PUSHABLE;
    is  CANNOTPUSH;
    is  SOLID;
    is  BOUNCEONACTORS;
    is  DROPOFF;
    is  NOBLOCKMONST;
    is  CANPASS;
    is  SLIDESONWALLS;
    is  NOTELESTOMP;
    is  CANBLAST;
    is  THRUSPECIES;
    is  PAINLESS;
    is  CANBOUNCEWATER;
    is  CORPSE;

    var user_limbangle = Random(0, 255);

    macro Display {
        invisi 0 A_SpawnItemEx(LimbType, 0, 0, 0, 0, 0, 0, user_limbangle);
        invisi 0 A_SetUserVar("user_limbangle", user_limbangle + (velx*velx + vely*vely + velz*velz) * 0.3);
        invisi 1;
    };

    label Spawn {
        invisi 0;
        invisi 0 x2 A_PlaySound("zdpack/multisprite/animal/fox/gibbed");
        goto Thrust;
    };

    label Thrust {
        invisi 0 {
            A_CheckFloor("Death");
            ThrustThing(random(0, 255), random(3, 17) * 4, 1, 0);
            x2 ThrustThingZ(0, 4 * random(30, 90), 0, 1);
        };
        goto Fly;
    };

    label Fly {
        invisi 0 A_ScaleVelocity(0.97);

        if (velx*velx + vely*vely + velz*velz > 3) {
            sometimes 35 invisi 0 A_SpawnItemEx("Blood", -4, Random(0, 4) - 2, 2, Random(-2, 2), Random(-2, 2), Random(1, -4));
        };

        inject Display;
        goto Fly;
    };

    label Landed {
        goto Death;
    };

    label Death {
        inject Display;
        invisi 0 A_CheckFloor(2);
        invisi 0 A_PlaySound("zdpack/multisprite/animal/fox/gib/bounce");
        goto Fly;
        sometimes 10 goto RealDeath;
        loop;
    };

    label RealDeath {
        invisi 0;
        stop;
    };
}

derive MSP_Head1 as MSP_Limb::(0.35) { macro Display { FX_H A 1; }; };
derive MSP_Head2 as MSP_Limb::(0.35) { macro Display { FX_H B 1; }; };

derive MSP_Tail1 as MSP_Limb::(0.6) { macro Display { FX_T A 1; }; };
derive MSP_Tail2 as MSP_Limb::(0.6) { macro Display { FX_T B 1; }; };
derive MSP_Tail3 as MSP_Limb::(0.6) { macro Display { FX_T C 1; }; };
derive MSP_Tail4 as MSP_Limb::(0.6) { macro Display { FX_T D 1; }; };
derive MSP_Tail5 as MSP_Limb::(0.6) { macro Display { FX_T E 1; }; };

derive MSP_Torso as MSP_Limb::(0.6) { macro Display { FX_R A 1; }; };

derive MSP_Leg1 as MSP_Limb::(0.5) { macro Display{ FX_L A 1; }; };
derive MSP_Leg2 as MSP_Limb::(0.5) { macro Display{ FX_L B 1; }; };
derive MSP_Leg3 as MSP_Limb::(0.5) { macro Display{ FX_L C 1; }; };
derive MSP_Leg4 as MSP_Limb::(0.5) { macro Display{ FX_L D 1; }; };

derive MSG_Leg      as MSGore_FoxLimb::("MSP_Leg1");
derive MSG_Head     as MSGore_FoxLimb::("MSP_Head2");
derive MSG_Torso    as MSGore_FoxLimb::("MSP_Torso");


class MSA_Fox {
    set     Health          to 25;
    set     Mass            to 8;
    set     Obituary        to "%o got chewed by a deceivingly cutesy Fox!";
    set     Radius          to 16;
    set     MeleeRange      to 25;
    set     Height          to 12;

    combo   Monster;

    is      NOBLOCKMONST;
    is      DROPOFF;
    is      SLIDESONWALLS;

    macro SpawnLimb(height, forward, right, cls) {
        invisi 0 A_SpawnItemEx(cls, forward, right, height + 5);
    };

    macro DrawLegAt_A(forward, right) {
        inject SpawnLimb(9, forward, right, "MSP_Leg1");
    };

    macro DrawLegAt_B(forward, right) {
        inject SpawnLimb(9, forward, right, "MSP_Leg2");
    };

    macro DrawLegAt_C(forward, right) {
        inject SpawnLimb(9, forward, right, "MSP_Leg3");
    };

    macro DrawLegAt_D(forward, right) {
        inject SpawnLimb(9, forward, right, "MSP_Leg4");
    };

    macro DrawHeadNormal {
       inject SpawnLimb(9, 24, 0, "MSP_Head1");
    };

    macro DrawHeadAttack {
       inject SpawnLimb(9, 24, 0, "MSP_Head2");
    };

    macro DrawTorso {
        inject SpawnLimb(10, 2, 0, "MSP_Torso");
    };

    macro DrawTail(which) {
        inject SpawnLimb(11, -8, 0, which);
    };

    // Combine individual parts
    macro DrawLegsNormal {
        inject DrawLegAt_A( 6, -3.5);
        inject DrawLegAt_A( 6,  3.5);
        inject DrawLegAt_A(-6, -3.5);
        inject DrawLegAt_A(-6,  3.5);
    };

    macro DrawLegs1 {
        inject DrawLegAt_A( 6, -3.5);
        inject DrawLegAt_C( 6,  3.5);
        inject DrawLegAt_A(-6, -3.5);
        inject DrawLegAt_C(-6,  3.5);
    };

    macro DrawLegs2 {
        inject DrawLegAt_B( 6, -3.5);
        inject DrawLegAt_D( 6,  3.5);
        inject DrawLegAt_B(-6, -3.5);
        inject DrawLegAt_D(-6,  3.5);
    };

    macro DrawLegs3 {
        inject DrawLegAt_C( 6, -3.5);
        inject DrawLegAt_A( 6,  3.5);
        inject DrawLegAt_C(-6, -3.5);
        inject DrawLegAt_A(-6,  3.5);
    };

    macro DrawLegs4 {
        inject DrawLegAt_D( 6, -3.5);
        inject DrawLegAt_B( 6,  3.5);
        inject DrawLegAt_D(-6, -3.5);
        inject DrawLegAt_B(-6,  3.5);
    };

    // Animations
    macro DrawTail1 {
        inject DrawTail("MSP_Tail1");
    };

    macro DrawTail2 {
        inject DrawTail("MSP_Tail2");
    };

    macro DrawTail3 {
        inject DrawTail("MSP_Tail3");
    };

    macro DrawTail4 {
        inject DrawTail("MSP_Tail4");
    };

    macro DrawTail5 {
        inject DrawTail("MSP_Tail5");
    };

    // Animation states
    macro DrawWait1 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail1;
        inject DrawHeadNormal;
    };

    macro DrawWait2 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail2;
        inject DrawHeadNormal;
    };

    macro DrawWait3 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail3;
        inject DrawHeadNormal;
    };

    macro DrawWait4 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail4;
        inject DrawHeadNormal;
    };

    macro DrawWait5 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail5;
        inject DrawHeadNormal;
    };

    macro DrawAttack1 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail1;
        inject DrawHeadAttack;
    };

    macro DrawAttack2 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail3;
        inject DrawHeadAttack;
    };

    macro DrawAttack3 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail1;
        inject DrawHeadAttack;
    };

    macro DrawAttack4 {
        inject DrawLegsNormal;
        inject DrawTorso;
        inject DrawTail5;
        inject DrawHeadAttack;
    };

    macro DrawWalk1 {
        inject DrawLegs1;
        inject DrawTorso;
        inject DrawTail1;
        inject DrawHeadNormal;
    };

    macro DrawWalk2 {
        inject DrawLegs2;
        inject DrawTorso;
        inject DrawTail3;
        inject DrawHeadNormal;
    };

    macro DrawWalk3 {
        inject DrawLegs3;
        inject DrawTorso;
        inject DrawTail1;
        inject DrawHeadNormal;
    };

    macro DrawWalk4 {
        inject DrawLegs4;
        inject DrawTorso;
        inject DrawTail5;
        inject DrawHeadNormal;
    };

    // Common tick macros
    macro Tick_Wander {
        ifjump A_CheckLOF($offset, CLOFF_JUMP_ON_MISS | CLOFF_SKIPTARGET | CLOFF_ALLOWNULL | CLOFF_AIM_VERT_NOOFFSET | CLOFF_MUSTBESOLID | CLOFF_SKIPENEMY | CLOFF_SKIPFRIEND, Radius + 50, 0, 0, 0, 9) {
            ifjump A_CheckLOF($offset, CLOFF_JUMP_ON_MISS | CLOFF_SKIPTARGET | CLOFF_ALLOWNULL | CLOFF_AIM_VERT_NOOFFSET | CLOFF_MUSTBESOLID | CLOFF_SKIPENEMY | CLOFF_SKIPFRIEND, Radius + 15, 0, 0, 0, 9) {
                //   -- avoid getting stuck on walls --

                #IFDEF LOGDEBUG
                sometimes 50 invisi 0 A_Log("wander: crap! go back!");
                #ENDIF

                x 3 {
                    x 8 invisi 0 A_SetAngle(angle + Random(-2, 2));
                    invisi 0 A_Recoil(0.25);
                };
            };

            else {
                //   -- check for other ways --

                ifjump A_CheckLOF($offset, CLOFF_JUMP_ON_MISS | CLOFF_SKIPTARGET | CLOFF_ALLOWNULL | CLOFF_AIM_VERT_NOOFFSET | CLOFF_MUSTBESOLID | CLOFF_SKIPENEMY | CLOFF_SKIPFRIEND, Radius + 64, 0,  45,  8, 9); else { // ...to the right
                    #IFDEF LOGDEBUG
                    sometimes 30 invisi 0 A_Log("wander: go left");
                    #ENDIF

                    invisi 0 A_SetAngle(angle + 10);
                    x 2 sometimes 50 invisi 0 A_SetAngle(angle + 6);

                    invisi 0 A_Recoil(-0.05);
                };

                ifjump A_CheckLOF($offset, CLOFF_JUMP_ON_MISS | CLOFF_SKIPTARGET | CLOFF_ALLOWNULL | CLOFF_AIM_VERT_NOOFFSET | CLOFF_MUSTBESOLID | CLOFF_SKIPENEMY | CLOFF_SKIPFRIEND, Radius + 64, 0, -45, -8, 9); else { // ...to the left
                    #IFDEF LOGDEBUG
                    sometimes 30 invisi 0 A_Log("wander: go right");
                    #ENDIF

                    invisi 0 A_SetAngle(angle - 10);
                    x 2 sometimes 50 invisi 0 A_SetAngle(angle - 6);

                    invisi 0 A_Recoil(-0.05);
                };


                //    -- just be careful --

                #IFDEF LOGDEBUG
                sometimes 8 invisi 0 A_Log("wander: go easy");
                #ENDIF

                invisi 0 A_Recoil(0.1);
                x 5 invisi 0 A_SetAngle(angle + Random(-2, 2));
            };
        };

        else {
            //   -- don't bother looking around if we can go forward! --
            #IFDEF LOGDEBUG
            sometimes 5 invisi 0 A_Log("wander: go straight");
            #ENDIF

            invisi 0 A_Recoil(-0.25);
            x 3 invisi 0 A_SetAngle(angle + Random(-3, 3));
        };
    };

    macro Tick_Chase {
        invisi 0 A_FaceTarget(2);

        // bite if possible!
        invisi 0 A_JumpIfTargetInsideMeleeRange("Melee");

        // "more realistic eye movements"
        sometimes 15 ifjump A_JumpIfTargetInLOS($offset, 15) {
            x 4 invisi 0 A_SetAngle(angle + Random(-5, 5));
        };

        // chase!
        ifjump A_JumpIfTargetInLOS($offset) invisi 0 {
            A_FaceTarget(12);
            A_Recoil(-0.55);
        };

        // can't see target... :c
        else {
            invisi 0 A_ClearTarget;
            goto Idle;
        };
    };

    macro Tick_Rest {
        x 5 sometimes 3 invisi 0 A_Recoil(-0.2);
        x 5 sometimes 3 invisi 0 A_Recoil( 0.2);
    };

    macro Tick_PounceWindup {
        x 2 sometimes 15 invisi 0 A_Recoil(0.08);
    };

    macro Tick_Pounce {
        invisi 0 ThrustThingZ(0, random(16, 40), 0, 1);
        invisi 0 ThrustThing(angle * 256 / 360, 20, 1, 0);
    };

    // Behaviours
    macro FoxPounce(tics_windup, anim_windup, tics_notice, anim_pounce) {
        x tics_windup {
            inject @anim_windup;
            ifjump A_CheckLOF($offset, CLOFF_JUMP_ON_MISS) {
                x tics_notice {
                    inject @anim_windup;
		    invisi 1;
                };
                goto See;
            };

            inject Tick_PounceWindup;
	    invisi 1;
        };

        inject Tick_Pounce;

        while (z > floorz + 16) {
            ifjump A_JumpIfTargetInsideMeleeRange($offset) {
                inject PounceMeleeAttack;
                goto See;
            };
            invisi 1;
        };

	x tics_notice {
	    inject @anim_windup;
	    invisi 1;
	};

        goto See;
    };

    macro MaybeFoxPounce(chance, min_dist, max_dist, tics_windup, anim_windup, tics_notice, anim_pounce) {
    	if (z < floorz + 4)
            ifjump A_JumpIfCloser(min_dist, $offset); else
                ifjump A_JumpIfCloser(max_dist, $offset)
                    sometimes chance
                        inject FoxPounce(tics_windup, anim_windup, tics_notice, anim_pounce);
    };

    macro FoxWander(tics, anim, sound_chance, rest_chance) {
        x tics {
            inject @anim;
            inject Tick_Wander;
            invisi 1 A_Look;
        };

        sometimes (rest_chance) goto Rest;
        sometimes (sound_chance * tics) invisi 0 A_PlaySound("zdpack/multisprite/animal/fox/idle");
    };

    macro FoxRest(tics, anim, sound_chance) {
        x tics {
            inject @anim;
            inject Tick_Rest;
            invisi 1 A_Look;
        };

        sometimes (sound_chance * tics) invisi 0 A_PlaySound("zdpack/multisprite/animal/fox/idle");
    };

    macro FoxChase(tics, anim, sound_chance) {
        x tics {
            inject @anim;
            inject Tick_Chase;
            invisi 1;
        };

        inject MaybeFoxPounce(15, 32, 200, 30, DrawWait2, 16, DrawWait4);

        sometimes (sound_chance * tics) invisi 0 A_PlaySound("zdpack/multisprite/animal/fox/see");
    };

    // States
    label Spawn {
        // Tail swinging to a side.
        x8 { invisi 1; inject DrawWait1; };
        x6 { invisi 1; inject DrawWait2; };
        invisi 0 A_Look;
        x6 { invisi 1; inject DrawWait3; };
        x6 { invisi 1; inject DrawWait2; };
        invisi 0 A_Look;

        // Tail swinging to the other side.
        x8 { invisi 1; inject DrawWait1; };
        x6 { invisi 1; inject DrawWait4; };
        invisi 0 A_Look;
        x6 { invisi 1; inject DrawWait5; };
        x6 { invisi 1; inject DrawWait4; };
        invisi 0 A_Look;

        sometimes 75 {
            invisi 0 A_ClearTarget;
            goto Idle;
        };

        loop;
    };

    label Idle {
        inject FoxWander(8, DrawWalk1, 6, 2);
        inject FoxWander(6, DrawWalk2, 6, 2);
        inject FoxWander(8, DrawWalk3, 6, 2);
        inject FoxWander(6, DrawWalk4, 6, 3);

        loop;
    };

    label Rest {
        x 5 inject FoxRest(3, DrawWalk1, 2);
        x 5 inject FoxRest(3, DrawWalk3, 2);

        sometimes 30 goto Rest;

        goto Idle;
    };

    label Pain {
        invisi 0 A_PlaySound("zdpack/multisprite/animal/fox/hurt");
        x3 { invisi 1; inject DrawAttack3; };
        x2 { invisi 1; inject DrawAttack2; };
             invisi 1; inject DrawAttack1;

        invisi 0 A_JumpIfTargetInLOS("Idle");

        goto See;
    };

    label See {
        inject FoxChase(4, DrawWalk1, 9);
        inject FoxChase(2, DrawWalk2, 9);
        inject FoxChase(3, DrawWalk3, 9);
        inject FoxChase(2, DrawWalk2, 9);

        loop;
    };

    macro PounceMeleeAttack {
        invisi 0 A_FaceTarget;
        // lots of momentum means lots of damage!!! :o
        invisi 0 A_CustomMeleeAttack(random(4, 24), "zdpack/multisprite/animal/fox/bite");
    };

    macro MeleeAttack {
        invisi 0 A_FaceTarget;
        invisi 0 A_CustomMeleeAttack(random(1, 6), "zdpack/multisprite/animal/fox/bite");
        sometimes 30 goto Idle;
    };

    label Melee {
        x5 { invisi 1; inject DrawAttack1; invisi 0 { A_FaceTarget; A_Recoil(-0.3); }; };
        goto MeleeLoop;
    };

    label MeleeLoop {
        x2 { invisi 1; inject DrawAttack1; invisi 0 { A_FaceTarget; A_Recoil(-0.3); }; inject MeleeAttack; };
        invisi 0 A_JumpIfTargetOutsideMeleeRange("See");
        x2 { invisi 1; inject DrawAttack2; invisi 0 { A_FaceTarget; A_Recoil(-0.3); }; };
        invisi 0 A_JumpIfTargetOutsideMeleeRange("See");
        x2 { invisi 1; inject DrawAttack4; invisi 0 { A_FaceTarget; A_Recoil(-0.3); }; inject MeleeAttack; };
        invisi 0 A_JumpIfTargetOutsideMeleeRange("See");
        x2 { invisi 1; inject DrawAttack3; invisi 0 { A_FaceTarget; A_Recoil(-0.3); }; };
        invisi 0 A_JumpIfTargetOutsideMeleeRange("See");
        invisi 0 A_ClearTarget;
        goto Idle;
    };

    label Death {
        invisi 0 {
            x4 A_SpawnItemEx("MSG_Leg", 0, 0, height * 1.2);
            A_SpawnItemEx("MSG_Head", 0, 0, height * 1.2);
            A_SpawnItemEx("MSG_Torso", 0, 0, height * 1.2);
        };
        stop;
    };
}

class MSA_Fox_Good extends MSA_Fox {
    is FRIENDLY;
}

// now, adding to the normal game

class<PickupSprite, PickupType, Scale> FoxyPickup {
    is LOOKALLAROUND;
    is AMBUSH;
    is QUICKTORETALIATE;

    label Spawn {
        param PickupSprite A 0;
        goto Look;
    };

    label Look {
        param PickupSprite A 2;
        keepst 0 A_LookEx(LOF_NOSOUNDCHECK);
        loop;
    };

    label See {
        param PickupSprite A 0 A_JumpIfCloser(270, "SpawnFox");
        goto Look;
    };

    label SpawnFox {
        param PickupSprite A 0 ThrustThingZ(0, random(3, 8), 0, 1);

        param PickupSprite A 30 [Bright] ThrustThing(random(0, 255), random(1, 3), 0, 0);
        x 2 sometimes 70 {
            param PickupSprite A 30 [Bright] ThrustThing(random(0, 255), random(1, 3), 0, 0);
            sometimes 50 keepst 20;
        };

        invisi 0 A_SpawnItemEx("MSA_Fox_Good");
        invisi 0 A_SpawnItemEx(PickupType);

        stop;
    };
}

#DEFMACRO NOTRANSLATION() "1:1=1:1"

class<PickupSprite, PickupType, NormalChance, FoxChance, Scale, MaybeTranslation> FoxyPickupSpawner replaces PickupType {
    set Translation to MaybeTranslation;

    macro RandomSpawn(NormalPickupType) {
        sometimes (100 * FoxChance / (NormalChance + FoxChance)) {
            invisi 0 A_SpawnItemEx(FoxyPickup::(PickupSprite, NormalPickupType, Scale), 0, 0, 4);
            stop;
        };
        invisi 0 A_SpawnItemEx(NormalPickupType);
    };

    label Spawn {
        inject RandomSpawn(class extends PickupType);
        stop;
    };
}

derive FoxyHealthBonusSpawner   as FoxyPickupSpawner::("BON1", "HealthBonus",    7,  1, 1.0, NOTRANSLATION());
derive FoxyArmorBonusSpawner    as FoxyPickupSpawner::("BON2", "ArmorBonus",     8,  2, 1.0, NOTRANSLATION());

derive FoxyClipSpawner          as FoxyPickupSpawner::("CLIP", "Clip",           17, 2, 1.0, NOTRANSLATION());
derive FoxyShellSpawner         as FoxyPickupSpawner::("SHEL", "Shell",          5,  1, 1.0, NOTRANSLATION());
derive FoxyRocketSpawner        as FoxyPickupSpawner::("ROCK", "RocketAmmo",     6,  2, 1.0, NOTRANSLATION());
derive FoxyCellSpawner          as FoxyPickupSpawner::("CELL", "Cell",           9,  4, 1.0, NOTRANSLATION());

class<foxtype> BaseFoxyFountain {
    label Spawn {
        invisi 120;
        goto SpawnLoop;
    };

    macro Add(height, addtype, teletype) {
        invisi 0 {
            A_SpawnItemEx(addtype, 0, 0, height);
            A_SpawnItemEx(teletype, 0, 0, height);
        };
    };

    label SpawnLoop {
        TNT1 A 20;
        x 50 sometimes 20 TNT1 A 5;
        x 3 index which_fox sometimes 50 {
            inject Add(which_fox * 40, foxtype, class extends TeleportFog {
                set Translation to "Ice";
            });
        };
        TNT1 A 2;
        loop;
    };
}

derive FoxyFountain      as BaseFoxyFountain::("MSA_Fox");
derive FoxyFountain_Good as BaseFoxyFountain::("MSA_Fox_Good");
